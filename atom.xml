<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil&#39;s site</title>
  <subtitle>A bird is known by its note, and a man by his talk.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hero-guo.com/"/>
  <updated>2018-07-11T15:28:06.687Z</updated>
  <id>http://hero-guo.com/</id>
  
  <author>
    <name>Neil Guo</name>
    <email>handsamechina@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript事件循环探索</title>
    <link href="http://hero-guo.com/2018/07/11/javascript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%8E%A2%E7%B4%A2/"/>
    <id>http://hero-guo.com/2018/07/11/javascript事件循环探索/</id>
    <published>2018-07-11T13:28:57.000Z</published>
    <updated>2018-07-11T15:28:06.687Z</updated>
    
    <content type="html"><![CDATA[<p>一直对js的事件循环不是很清晰，最近看了JavaScript忍者秘籍的第13章后，有了一些感悟，特此总结一下，分享给大家。</p>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>众所周知，JavaScript是单线程执行模型，同一时刻只能执行一个代码片段，一个任务开始后知道运行完成，不会被其他任务中断。当一个任务花费的时间很长的话，用户就会明显的感觉到卡顿。浏览器为了解决这个问题引入了事件循环的概念（Event Loop）。</p>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>事件循环具有至少两个队列处理任务。任务分为两类，宏任务（macro-task）和微任务（micro-task）。</p>
<ol>
<li>宏任务代表一个个离散、独立的工作单元，运行完之后，浏览器可以继续其他的调度。包括：创建文档对象，解析HTML，执行JavaScript，以及各种事件……</li>
<li>微任务是更小的任务，主要用户更新应用程序的状态，必须在浏览器任务继续执行其他任务之前执行。微任务需要尽可能快地通过异步方式执行，同时不能产生全新的微任务。包括promise、回调函数、DOM发生变化……</li>
</ol>
<h4 id="仅包含宏任务"><a href="#仅包含宏任务" class="headerlink" title="仅包含宏任务"></a>仅包含宏任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主线程JavaScript运行15ms</span></div><div class="line">btn1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;运行 <span class="number">8</span>ms&#125;, <span class="literal">false</span>);</div><div class="line">btn2.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;运行 <span class="number">5</span>ms&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>​    现在假设主线程运行15ms， 在第5ms单击btn1，在第12ms的时候单击btn2。基于单线程执行模型，单击按钮之后不会立即执行对应的处理函数，因为一个任务一旦开始就不会被另一个任务中断。因此，在主线程执行的15ms期间，按钮的单击处理函数放入队列。当主线程执行完成也就是15ms之后，程序开始处理微任务，因为当前不存在微任务，跳过此步骤，开始执行更新UI。</p>
<p>​    之后进入第二次循环，也就是开始执行btn1的处理函数，需要运行8ms，btn2处理函数在队列中等待。当btn1处理函数执行完之后，浏览器检查微任务是否存在和是否更新UI，删除任务队列里的btn1的处理函数。</p>
<p>​    最后进入第三次循环，开始执行btn2的处理函数，需要运行5ms，处理函数执行完之后，检查微任务和是否需要更新UI，删除任务队列里的btn2的处理函数，最终任务队列为空，循环结束。</p>
<h4 id="同时含有宏任务和微任务"><a href="#同时含有宏任务和微任务" class="headerlink" title="同时含有宏任务和微任务"></a>同时含有宏任务和微任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主线程JavaScript运行15ms</span></div><div class="line">btn1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">       运行 <span class="number">4</span>ms </div><div class="line">    &#125;);</div><div class="line">    运行 <span class="number">8</span>ms </div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">btn2.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;运行 <span class="number">5</span>ms&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>本例中在btn1的事件处理函数里增加了一个立即兑现的Promise，需要运行4ms。</p>
<p>现在代码的执行顺序为：</p>
<pre><code>1. 主线程执行15ms，在5ms和12ms的时候分别将处理函数放入任务队列，更新UI。
2. 15m后处理btn1事件处理函数，发现Promise，放入微任务队列，btn1事件处理函数继续执行8ms，检查微任务队列发现有Promise回调函数，然后开始执行Promise回调函数，运行4ms，继续检查微任务队列，如果为空，检查是否需要更新UI，进入下一轮循环。
3. 处理btn2的事件处理函数……
</code></pre><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><p>基于上面的事件循环机制，现在我们来看一种特殊类型的事件：<em>计时器</em>。浏览器提供了两种创建计时器的方法 <code>setTimeout</code> 和 <code>setInterval</code>。 他们都挂载在 <code>window</code> 对象上。</p>
<p> <code>setTimeout</code>：在指定的延迟时间结束时执行一次回调函数，返回标识计时器的唯一值，可用于取消定时器（<code>clearTimeout(id)</code>）。</p>
<p><code>setInterval</code>：按照指定的延迟间隔不断的执行回调函数，返回标识计时器的唯一值，可用于取消定时器（<code>clearInterval(id)</code>）。</p>
<h4 id="事件循环中的定时器"><a href="#事件循环中的定时器" class="headerlink" title="事件循环中的定时器"></a>事件循环中的定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主线程JavaScript运行18ms</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    运行<span class="number">6</span>ms;</div><div class="line">&#125;, <span class="number">10</span>);</div><div class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    运行<span class="number">8</span>ms;</div><div class="line">&#125;, <span class="number">10</span>);</div><div class="line">btn1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;运行 <span class="number">10</span>ms&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>👆代码的执行过程是什么呢？</p>
<p>现在我们想象一下主线程代码需要运行18ms，在第6ms的时候用户点击了按钮，在第10ms延迟计时器到期，间隔计时器第一次触发。</p>
<p>我们知道一个任务一旦开始执行，就无法被其他任务中断。所以，6ms将事件处理函数加入队列，10ms分别将延迟计时器和间隔计时器回调放入队列。运行到18m主线程执行完毕，检查微任务队列和更新UI，进入下一个时间循环。开始执行btn1事件回调，运行10ms，这时候在btn1事件回调运行的过程中，<em>间隔计时器第二次到期，但是任务队列里面已经有一个间隔计时器处理函数</em>，所以忽略这个处理函数。btn1事件回调运行结束，检查微任务队列和更新UI，进入下一个事件循环。开始执行延迟计时器处理函数，运行6ms，在这个过程中间隔计时器第三次到期，但是由于任务队列已经有了处理函数，继续忽略。延迟计时器处理函数运行完毕，检查微任务队列和更新UI，进入下一个事件循环。现在开始执行间隔计时器处理函数，运行8ms，在这期间间隔计时器第四次到期，这时候任务队列里没有处理函数，所以将这次的处理函数放入任务队列，间隔定时器处理函数运行完成，检查微任务队列和更新UI，进入下一个事件循环，然后重复运行间隔定时器……</p>
<p>通过以上的执行过程我们发现，<strong>我们只能控制计时器何时被加入队列，而无法控制何时执行。</strong></p>
<p>最后，JavaScript的事件循环是这门语言非常重要的基础，由于我水平有限以上只是简单总结了一下它的执行过程。大家可以深入研究一下<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">Nodejs的事件循环</a></p>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直对js的事件循环不是很清晰，最近看了JavaScript忍者秘籍的第13章后，有了一些感悟，特此总结一下，分享给大家。&lt;/p&gt;
&lt;h3 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="事件循环" scheme="http://hero-guo.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>扩展原生Number</title>
    <link href="http://hero-guo.com/2018/02/05/%E6%89%A9%E5%B1%95%E5%8E%9F%E7%94%9FNumber/"/>
    <id>http://hero-guo.com/2018/02/05/扩展原生Number/</id>
    <published>2018-02-05T14:46:27.000Z</published>
    <updated>2018-02-05T14:52:50.457Z</updated>
    
    <content type="html"><![CDATA[<p>今天看<a href="https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20%26%20beyond/ch3.md" target="_blank" rel="noopener"><strong>你不知道的js</strong></a> 第三章有个比较有意思的方法，特记录一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.prototype[<span class="built_in">Symbol</span>.iterator]) &#123;</div><div class="line">	<span class="built_in">Object</span>.defineProperty(</div><div class="line">		<span class="built_in">Number</span>.prototype,</div><div class="line">		<span class="built_in">Symbol</span>.iterator,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">			<span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">			<span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">			<span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> i, inc, done = <span class="literal">false</span>, top = +<span class="keyword">this</span>;</div><div class="line"></div><div class="line">				<span class="comment">// iterate positively or negatively?</span></div><div class="line">				inc = <span class="number">1</span> * (top &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>);</div><div class="line"></div><div class="line">				<span class="keyword">return</span> &#123;</div><div class="line">					<span class="comment">// make the iterator itself an iterable!</span></div><div class="line">					[<span class="built_in">Symbol</span>.iterator]()&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;,</div><div class="line"></div><div class="line">					next() &#123;</div><div class="line">						<span class="keyword">if</span> (!done) &#123;</div><div class="line">							<span class="comment">// initial iteration always 0</span></div><div class="line">							<span class="keyword">if</span> (i == <span class="literal">null</span>) &#123;</div><div class="line">								i = <span class="number">0</span>;</div><div class="line">							&#125;</div><div class="line">							<span class="comment">// iterating positively</span></div><div class="line">							<span class="keyword">else</span> <span class="keyword">if</span> (top &gt;= <span class="number">0</span>) &#123;</div><div class="line">								i = <span class="built_in">Math</span>.min(top,i + inc);</div><div class="line">							&#125;</div><div class="line">							<span class="comment">// iterating negatively</span></div><div class="line">							<span class="keyword">else</span> &#123;</div><div class="line">								i = <span class="built_in">Math</span>.max(top,i + inc);</div><div class="line">							&#125;</div><div class="line"></div><div class="line">							<span class="comment">// done after this iteration?</span></div><div class="line">							<span class="keyword">if</span> (i == top) done = <span class="literal">true</span>;</div><div class="line"></div><div class="line">							<span class="keyword">return</span> &#123; <span class="attr">value</span>: i, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> &#123;</div><div class="line">							<span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="number">3</span>) &#123;</div><div class="line">	<span class="built_in">console</span>.log( i );</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 1 2 3</span></div><div class="line"></div><div class="line">[...<span class="number">-3</span>];				<span class="comment">// [0,-1,-2,-3]</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20%26%20beyond/ch3.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;你不知道
    
    </summary>
    
      <category term="Notes" scheme="http://hero-guo.com/categories/Notes/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://hero-guo.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用commitlint规范git提交</title>
    <link href="http://hero-guo.com/2018/02/05/%E4%BD%BF%E7%94%A8commitlint%E8%A7%84%E8%8C%83git%E6%8F%90%E4%BA%A4/"/>
    <id>http://hero-guo.com/2018/02/05/使用commitlint规范git提交/</id>
    <published>2018-02-05T14:06:11.000Z</published>
    <updated>2018-02-05T14:13:28.413Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://marionebl.github.io/commitlint/" target="_blank" rel="noopener">commitlint</a>: git 提交信息规范与验证</p>
<p><a href="https://github.com/typicode/husky/tree/master" target="_blank" rel="noopener">husky</a>: 使ghook更容易</p>
<p><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener">standard-version</a>: 自动生成CHANGELOG 并发布版本</p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev @commitlint/&#123;config-conventional,cli&#125;</div><div class="line">npm i --save-dev standard-version</div><div class="line">npm install husky --save-dev</div></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li>commitlint</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">echo &quot;module.exports = &#123;extends: [&apos;@commitlint/config-conventional&apos;]&#125;&quot; &gt; commitlint.config.js</div><div class="line">// commitlint.config.js</div><div class="line"> module.exports = &#123;</div><div class="line">  extends: [&apos;@commitlint/config-conventional&apos;],</div><div class="line">  rules: &#123;</div><div class="line">  &apos;type-enum&apos;: [2, &apos;always&apos;, [</div><div class="line">     &quot;feat&quot;, &quot;fix&quot;, &quot;docs&quot;, &quot;style&quot;, &quot;refactor&quot;, &quot;perf&quot;, &quot;test&quot;, &quot;build&quot;, &quot;ci&quot;, &quot;chore&quot;, &quot;revert&quot;</div><div class="line">   ]],</div><div class="line">  &apos;scope-empty&apos;: [2, &apos;never&apos;],</div><div class="line">  &apos;subject-full-stop&apos;: [0, &apos;never&apos;], </div><div class="line">  &apos;subject-case&apos;: [0, &apos;never&apos;]</div><div class="line">  &#125;&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>tandard-version 和 husky</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line"> &quot;scripts&quot;: &#123;</div><div class="line">  &quot;lint&quot;: &quot;eslint .&quot;,</div><div class="line">  &quot;commitmsg&quot;: &quot;commitlint -e $GIT_PARAMS&quot;,</div><div class="line">  &quot;release&quot;: &quot;standard-version&quot;,</div><div class="line">  &quot;validate&quot;: &quot;npm prune&quot;,</div><div class="line">  &quot;pre-commit&quot;: &quot;npm run lint&quot;,</div><div class="line">  &quot;pre-push&quot;: &quot;npm run validate&quot;,</div><div class="line">  &quot;npmi&quot;: &quot;npm i&quot;,</div><div class="line">  &quot;post-merge&quot;: &quot;npm run npmi&quot;,</div><div class="line">  &quot;post-rewrite&quot;: &quot;npm run npmi&quot;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://marionebl.github.io/commitlint/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;commitlint&lt;/a&gt;: git 提交信息规范与验证&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git
    
    </summary>
    
      <category term="Notes" scheme="http://hero-guo.com/categories/Notes/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="git" scheme="http://hero-guo.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端发展史</title>
    <link href="http://hero-guo.com/2017/12/17/%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <id>http://hero-guo.com/2017/12/17/前端发展史/</id>
    <published>2017-12-17T07:04:20.000Z</published>
    <updated>2017-12-17T06:38:50.667Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h5><p>前端工程师主要利用HMTL与CSS构建页面，用JavaScript完善交互以及用户体验。</p>
<h4 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h4><blockquote>
<p>1994年可以看做前端历史的起点，这一年10月13日网景推出了第一版Navigator；这一年，Tim Berners-Lee创建了W3C；这一年，Tim的基友发布了CSS（层叠样式表）。1995年，当时在<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E6%99%AF%E5%85%AC%E5%8F%B8" target="_blank" rel="noopener">网景公司</a>就职的<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E8%98%AD%E7%99%BB%C2%B7%E8%89%BE%E5%85%8B" target="_blank" rel="noopener">布兰登·艾克</a>正为<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E6%99%AF%E5%AF%BC%E8%88%AA%E8%80%85" target="_blank" rel="noopener">Netscape Navigator</a> 2.0浏览器开发的一门名为LiveScript的脚本语言，后来网景公司与<a href="https://zh.wikipedia.org/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" target="_blank" rel="noopener">昇阳</a>电脑公司组成的开发联盟为了让这门语言搭上<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">java</a>这个编程语言“热词”，将其临时改名为“JavaScript”，日后这成为大众对这门语言有诸多误解的原因之一。</p>
<p>万维网（WWW）是欧洲核子研究组织的一帮科学家为了方便看文档、传论文而创造的，这就是为什么Web网页都基于Document。Document就是用标记语言+超链接写成的由文字和图片构成的HTML页面，这样的功能已经完全满足学术交流的需要，所以网页的早期形态和Document一样，完全基于HTML页面，并且所有内容都是静态的。</p>
<p>1999年W3C发布第四代HTML标准，同年微软推出用于异步数据传输的ActiveX，随即各大浏览器厂商模仿实现了XMLHttpRequest。这标识着Ajax的诞生，但是Ajax这个词是在六年后问世的，特别是在谷歌使用Ajax技术打造了Gmail和谷歌地图之后，Ajax获得了巨大的关注。Ajax是Web网页迈向Web应用的关键技术，它标识着Web2.0时代的到来。</p>
<p>2006年，XMLHttpRequest被W3C正式纳入标准。</p>
<p>至此，早期的Document终于进化为了Web page，上述三个局限都得到了妥善的解决。</p>
</blockquote>
<h4 id="远古时代（web-1-0）"><a href="#远古时代（web-1-0）" class="headerlink" title="远古时代（web 1.0）"></a>远古时代（web 1.0）</h4><p>那时候的web开发还属于纯静态开发。开发者在web服务器的指定文件夹(/www)下，放置一下html文件，当浏览器请求的页面的时候返回相应的html文件。</p>
<p><img src="http://ww1.sinaimg.cn/large/63918611gw1e7ehutyrrnj20hz076dg8.jpg" alt=""></p>
<p>但是，渐渐的纯静态的页面不足以满足产品的发展需求（例如：统计该网站的访问流量，提交用户的输入信息）。这时候，大约2005年左右，出现了Java Server Pages(JSP)，微软的ASP，以及Ajax！你可以基于jsp和Ajax快速构建一个可伸缩并且安全的应用程序。</p>
<p><img src="https://github-camo.global.ssl.fastly.net/d0098546c9fa01b443c16ff1953c90aa9056955b/687474703a2f2f696d672e68622e616963646e2e636f6d2f3932393766646337336438336632373764343439633932313933613361663432386464633064343431316366392d6e31445936465f6677363538" alt=""></p>
<h4 id="石器时代-web-2-0"><a href="#石器时代-web-2-0" class="headerlink" title="石器时代 (web 2.0)"></a>石器时代 (web 2.0)</h4><p>因为当时浏览器厂商的混乱（例如：ie, chrome, firefox等），拥有不同内核的浏览器Trident(IE内核)，Gecko(Firefox 内核)，webkit（Safari 内涵）, Chromium/Blink（Chrome内核），Presto（Opera内核）等。当时的浏览器厂商的标准都不一样。比如写一个点击事件需要做一些兼容性处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> e = e || <span class="built_in">window</span>.event <span class="comment">//处理ie浏览器和其他浏览器之间的事件兼容问题</span></div></pre></td></tr></table></figure>
<p>这时候为了处理浏览器的兼容性，出现了YUI 和 jQuery, 主要解决了DOM元素选择，CSS操纵，事件系统处理。同时也可以兼顾一下动画效果的实现和一些常用插件的封装（表单验证，日历插件等）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//jQuery</span></div><div class="line">$(<span class="string">"p.surprise"</span>).addClass(<span class="string">"ohmy"</span>).show(<span class="string">"slow"</span>);</div><div class="line">$(<span class="string">"p.surprise"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e.target);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//YUI</span></div><div class="line">YUI().use(<span class="string">'node'</span>, <span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Y</span>) </span>&#123;</div><div class="line">  <span class="comment">// The Node and Event modules are loaded and ready to use.</span></div><div class="line">  <span class="comment">// Your code goes here!</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="模块化时代"><a href="#模块化时代" class="headerlink" title="模块化时代"></a>模块化时代</h4><p>最开始JavaScript承担的任务量并不多，表单验证基本上就是他的全部，最多就是简短的前端交互，这个时期JavaScript组织结构非常凌乱，大部分都是后端顺手代劳，那时候还没有“前端”这一职位。 一般都是写到一个文件或者直接写到jsp、asp的后端模板页面上就完事了。随着ajax的流行，前端能做的东西一夜之间暴涨，代码量飞速增加，单文件维护代码已经太沉重，多人开发全局变量泛滥，代码合并引起冲突覆盖等问题。最开始的解决的方式是用匿名函数包裹自己的代码，这样就不会把定义的变量暴露到全局作用域里面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//立即执行函数写法　</span></div><div class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//业务代码</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">m1</span> : m1</div><div class="line">  &#125;;</div><div class="line"> &#125;)();</div><div class="line"><span class="comment">//可以传入参数</span></div><div class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">$, undefined</span>) </span>&#123;</div><div class="line">　　<span class="comment">//业务代码</span></div><div class="line">&#125;)(jQuery);</div><div class="line"><span class="comment">//命名空间方式</span></div><div class="line"><span class="keyword">var</span> namespace = &#123;&#125;;</div><div class="line">namespace.xxx = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>随着网站逐渐的发展，嵌入网页的Javascript代码越来越庞大，而网页越来越像桌面程序，需要一个团队去分工协作，进行管理和测试等等，为了更好的管理网页的业务逻辑，处理代码之间的依赖关系，产生了模块化编程的理念。</p>
<p>2008年9月2日，Google为旗下浏览器Chrome加入了V8 JavaScript处理引擎，可以更快速，更稳定，更安全的处理JavaScript代码。2009年，Ryan Dahl结合Google的 V8引擎、事件驱动模式、低级I\O接口开发了Node.js。</p>
<p>2010年1月，一款名为’npm‘的软件包管理系统诞生，随之而来的还有<a href="http://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">commonJS 规范</a>。</p>
<blockquote>
<ol>
<li>模块的标识应遵循的规则（书写规范）</li>
<li>定义全局函数require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的API</li>
<li>如果被require函数引入的模块中也包含依赖，那么依次加载这些依赖</li>
<li>如果引入模块失败，那么require函数应该报一个异常</li>
<li>模块通过变量exports来向往暴漏API，exports只能是一个对象，暴漏的API须作为此对象的属性。</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, args = <span class="built_in">arguments</span>, l = args.length;</div><div class="line">  <span class="keyword">while</span> (i &lt; l) &#123;</div><div class="line">      sum += args[i++];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//add.js</span></div><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;</div><div class="line">add(val, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>但是Node.js主要是用于服务器端，无法直接用在浏览器端，主要表现在服务端require一个模块，直接就从硬盘或者内存中读取了，消耗的时间可以忽略。而浏览器则不同，需要从服务端来下载这个文件，然后运行里面的代码才能得到API，需要花费一个http请求，也就是说，require后面的一行代码，需要资源请求完成才能执行。由于浏览器端是以插入<code>&lt;script&gt;</code>标签的形式来加载资源的（ajax方式不行，有跨域问题），没办法让代码同步执行，所以像commonjs那样的写法会直接报错。</p>
<p>所以，社区意识到，要想在浏览器环境中也能模块化，需要对规范进行升级。而就在社区讨论制定下一版规范的时候，内部发生了比较大的分歧，产生了不同的规范。</p>
<h5 id="AMD-RequireJs的崛起与妥协"><a href="#AMD-RequireJs的崛起与妥协" class="headerlink" title="AMD/RequireJs的崛起与妥协"></a>AMD/RequireJs的崛起与妥协</h5><blockquote>
<ol>
<li>用全局函数define来定义模块，用法为：define(id?, dependencies?, factory);</li>
<li>id为模块标识，遵从CommonJS Module Identifiers规范</li>
<li>dependencies为依赖的模块数组，在factory中需传入形参与之一一对应</li>
<li>如果dependencies的值中有”require”、”exports”或”module”，则与commonjs中的实现保持一致</li>
<li>如果dependencies省略不写，则默认为[“require”, “exports”, “module”]，factory中也会默认传入require,exports,module</li>
<li>如果factory为函数，模块对外暴漏API的方法有三种：return任意类型的数据、exports.xxx=xxx、module.exports=xxx</li>
<li>如果factory为对象，则该对象即为模块的返回值</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//页面中需要引入require.js</span></div><div class="line"><span class="comment">//data-main 的作用是告诉 require.js 加载 main.js的代码.</span></div><div class="line"><span class="comment">// &lt;script data-main="scripts/main" src="scripts/require.js"&gt;&lt;/script&gt;</span></div><div class="line"><span class="comment">// math.js</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x+y;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">add</span>: add</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>)</span>&#123;</div><div class="line">  math.add(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="兼容并包的CMD-seajs"><a href="#兼容并包的CMD-seajs" class="headerlink" title="兼容并包的CMD/seajs"></a>兼容并包的CMD/seajs</h5><p>seajs的作者是国内大牛, 淘宝前端玉伯。</p>
<blockquote>
<ol>
<li>一个文件一个模块，所以经常就用文件名作为模块id</li>
<li>CMD推崇依赖就近，所以一般不在define的参数中写依赖，在factory中写</li>
<li>factory是一个函数，有三个参数，function(require, exports, module)<ul>
<li>require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口：require(id)</li>
<li>exports 是一个对象，用来向外提供模块接口</li>
<li>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</li>
</ul>
</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"sea.js"</span> data-main=<span class="string">"main.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="comment">//main.js</span></div><div class="line">seajs.use([<span class="string">'./hello'</span>, <span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">hello, $</span>) </span>&#123;</div><div class="line">  $(<span class="string">'#beautiful-sea'</span>).click(hello.sayHello);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//hello</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">  exports.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#hello'</span>).toggle(<span class="string">'slow'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>AMD与CMD区别主要是：</p>
<ol>
<li>AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块</li>
<li>CMD推崇就近依赖，只有在用到某个模块的时候再去require</li>
</ol>
<h5 id="面向未来的ES6模块标准"><a href="#面向未来的ES6模块标准" class="headerlink" title="面向未来的ES6模块标准"></a>面向未来的ES6模块标准</h5><p>ECMAScript是由ECMA-262标准化的脚本语言的名称。JavaScript和JScript与ECMAScript兼容，但包含超出ECMAScript的功能。ECMA-262的第一个版本于1997年6月被Ecma组织采纳。</p>
<p>2011 年，ECMAScript 5.1(ES5) 版发布。也是前端快速发展的一段时间。上面大部分模块解决方案，jQuery等框架都是基于ECMAScript 5.1规范开发的。2015 年，负责制定 ECMAScript 规范草案的委员会决定将定义新标准的制度改为一年一次。ES6的第一个版本在2015 年 6 月发布，正式名称就是《ECMAScript 2015 标准》（简称 ES2015/ES6），2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016/ES7），2017年6月，《ECMAScript 2017 标准》（简称 ES2017/ES8）。我们统一把ECMAScript 2015标准之后的版本称为<strong>ES6</strong>.</p>
<p>模块功能主要由两个命令构成：<code>export</code> 和 <code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//math.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x+y;</div><div class="line">&#125;</div><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">'./math'</span>;</div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>但是由于ES6的标准太超前，浏览器的更新无法跟上，所以还不能直接应用到浏览器里面。通过Babel 语法转换器在本地编译成浏览器可识别的ES5代码。</p>
<h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>前端发展到模块化时代变得越来正规，团队之间的配合也越来越重，遇到的问题越来越多，通过借鉴传统的后端开发模式，衍生出了自己的JavaScript设计模式（单例模式，观察者模式，原型模式等），也有了自己的架构模式（MVC，MVVM，MVP）。</p>
<p>根据不同的设计模式有出现了不同的前端框架(Ext JS, jQuery UI, jQuery Mobile, Dojo, Prototype JS, Kissy, React, Vue,  Angular等) 。</p>
<p>既然JavaScript出现了各种不同的模块解决方案，CSS也需要跟上JavaScript模块化进程（Sass, Less, Stylus）。</p>
<p>HTML也出现了各种模版系统（Handlebars，EJS等）。</p>
<p>各种编译工具（grunt, gulp, webpack等）。</p>
<p>最后, 我们期待无法预测的未来。</p>
<blockquote>
<p>It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way- in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.</p>
<p>那是最好的時代，那是最壞的時代；那是智慧的歲月，那是愚昧的歲月；那是信任的紀元，那是懷疑的紀元；那是光明的季節，那是黑暗的季節；那是希望的春天，那是失望的冬天；我們的前面曾應有盡有，我們的前面曾一無所有；我們都將走上天堂，我們都將走向另一端–簡言之，那段時期與現在的時期是那麼相似，那些最吵雜的權威人士都堅持，不論是善良或邪惡，用最高級形容詞來評論。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是前端&quot;&gt;&lt;a href=&quot;#什么是前端&quot; class=&quot;headerlink&quot; title=&quot;什么是前端&quot;&gt;&lt;/a&gt;什么是前端&lt;/h5&gt;&lt;p&gt;前端工程师主要利用HMTL与CSS构建页面，用JavaScript完善交互以及用户体验。&lt;/p&gt;
&lt;h4 id=&quot;诞
    
    </summary>
    
      <category term="Notes" scheme="http://hero-guo.com/categories/Notes/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数据去重</title>
    <link href="http://hero-guo.com/2017/11/06/arr-uniq/"/>
    <id>http://hero-guo.com/2017/11/06/arr-uniq/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2017-11-06T09:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="只包含原始变量-不会判断值的类型"><a href="#只包含原始变量-不会判断值的类型" class="headerlink" title="只包含原始变量, 不会判断值的类型"></a>只包含原始变量, 不会判断值的类型</h4><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [ <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span> ];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> arr.indexOf(v) === i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(uniq(array)); <span class="comment">//=&gt; [1, 'a']</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [ <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span> ];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</div><div class="line"><span class="comment">//return [...new Set(arr)]; </span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(uniq(array)); <span class="comment">//=&gt; [1, 'a']</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [ <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'a'</span> ];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> res = [];</div><div class="line">  <span class="keyword">const</span> len = arr.length;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!~res.indexOf(arr[i])) res.push(arr[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(uniq(array)); <span class="comment">//=&gt; [1, 'a']</span></div></pre></td></tr></table></figure>
<h4 id="包含引用类型"><a href="#包含引用类型" class="headerlink" title="包含引用类型"></a>包含引用类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> array = [&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, [ <span class="number">1</span>, <span class="number">2</span> ], [ <span class="number">1</span>, <span class="number">2</span> ]];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniq</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"> <span class="keyword">const</span> hash = &#123;&#125;;</div><div class="line"> <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> key = <span class="built_in">JSON</span>.stringify(v);</div><div class="line">   <span class="keyword">const</span> bool = !!hash[key];</div><div class="line">   <span class="keyword">return</span> bool ? <span class="literal">false</span> : hash[key] = <span class="literal">true</span>;</div><div class="line"> &#125;);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(uniq(array)); <span class="comment">//=&gt; [&#123; a: 1 &#125;, [ 1, 2 ]]</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;只包含原始变量-不会判断值的类型&quot;&gt;&lt;a href=&quot;#只包含原始变量-不会判断值的类型&quot; class=&quot;headerlink&quot; title=&quot;只包含原始变量, 不会判断值的类型&quot;&gt;&lt;/a&gt;只包含原始变量, 不会判断值的类型&lt;/h4&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="数据去重" scheme="http://hero-guo.com/tags/%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法 —— 栈</title>
    <link href="http://hero-guo.com/2017/09/09/javascript-%E2%80%94%E2%80%94-%E6%A0%88/"/>
    <id>http://hero-guo.com/2017/09/09/javascript-——-栈/</id>
    <published>2017-09-09T07:04:20.000Z</published>
    <updated>2018-07-11T13:37:05.847Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一本《学习JavaScript数据结构与算法》，想把里面介绍的一些数据结构和算法记录下来，加深印象。</p>
<blockquote>
<p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾。称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，就元素都接近栈底。</p>
</blockquote>
<p>在JavaScript里面数组的一些方法可以很好的模拟栈。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *用JavaScript数组模拟栈</div><div class="line"> *@class Stack</div><div class="line"> *@constructor</div><div class="line"> *@method</div><div class="line"> ** push(element) 添加一个或多个新元素到栈顶</div><div class="line"> ** pop() 移除栈顶的元素，同时返回被移除的新元素</div><div class="line"> ** peek() 返回栈顶元素，不对栈做任何修改</div><div class="line"> ** isEmpty() 返回ture(栈为空) 和 false(非空)</div><div class="line"> ** clear() 移除栈里的所有元素</div><div class="line"> ** size() 返回栈里元素的个数</div><div class="line"> ** print() 输出栈</div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> items = []; <span class="comment">//保存栈里的元素</span></div><div class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    items.push(element);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> items.pop();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> items[items.length - <span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> !items.length;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    items = [];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> items.length;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(items.toString());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上就是一个栈的实现。现在我们来看看怎么使用它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</div><div class="line"><span class="comment">//往栈里添加些元素</span></div><div class="line">stack.push(<span class="number">3</span>);</div><div class="line">stack.push(<span class="number">4</span>);</div><div class="line"><span class="comment">//调用方法</span></div><div class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">// =&gt; false</span></div><div class="line"><span class="built_in">console</span>.log(stack.size()); <span class="comment">// =&gt; 2</span></div><div class="line"><span class="built_in">console</span>.log(stack.peek()); <span class="comment">// =&gt; 4</span></div><div class="line"><span class="built_in">console</span>.log(stack.print()); <span class="comment">// =&gt; '3,4'</span></div><div class="line"></div><div class="line">stack.pop();</div><div class="line"><span class="built_in">console</span>.log(stack.print()); <span class="comment">// =&gt; 3</span></div><div class="line"></div><div class="line">stack.clear()</div><div class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(stack.print()); <span class="comment">// =&gt; ''</span></div></pre></td></tr></table></figure></p>
<h6 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h6><p>进制转换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">num, base</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack(),</div><div class="line">      base = base || <span class="number">2</span>,</div><div class="line">      rem,</div><div class="line">      digits = <span class="string">'0123456789ABCDEF'</span>,</div><div class="line">      baseString = <span class="string">''</span>;</div><div class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">    rem = <span class="built_in">Math</span>.floor(num % base);</div><div class="line">    stack.push(rem);</div><div class="line">    num = <span class="built_in">Math</span>.floor(num / base);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">    baseString += digits[stack.pop()];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> baseString;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100</span>)); <span class="comment">//=&gt; 1100100</span></div><div class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100</span>, <span class="number">8</span>)); <span class="comment">//=&gt; 144</span></div><div class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100</span>, <span class="number">16</span>)); <span class="comment">//=&gt; 64</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了一本《学习JavaScript数据结构与算法》，想把里面介绍的一些数据结构和算法记录下来，加深印象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾。称作栈顶，另一端就叫栈底。在栈里，新
    
    </summary>
    
      <category term="Notes" scheme="http://hero-guo.com/categories/Notes/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="数据结构与算法" scheme="http://hero-guo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面向对象</title>
    <link href="http://hero-guo.com/2017/04/11/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hero-guo.com/2017/04/11/JavaScript-面向对象/</id>
    <published>2017-04-11T03:05:34.000Z</published>
    <updated>2017-08-30T14:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数也是一个函数，通过new运算符可以生成一份实例同时把this绑定到实例上。JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span> (<span class="params">engines</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.engines = engines;</div><div class="line">  &#125;</div><div class="line">  Vehicle.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`engines=&gt;<span class="subst">$&#123;<span class="keyword">this</span>.engines&#125;</span>`</span>);    </div><div class="line">  &#125;</div><div class="line">  <span class="comment">//实例</span></div><div class="line">  <span class="keyword">var</span> car1 = <span class="keyword">new</span> Vehicle(<span class="number">1</span>);</div><div class="line">  <span class="keyword">var</span> car2 = <span class="keyword">new</span> Vehicle(<span class="number">2</span>);</div><div class="line">  car1.drive(); <span class="comment">//=&gt; engines=&gt;1</span></div><div class="line">  car2.drive(); <span class="comment">//=&gt; engines=&gt;2</span></div><div class="line">  <span class="built_in">console</span>.log(car1.constructor === Vehicle); <span class="comment">//true</span></div><div class="line">  <span class="built_in">console</span>.log(car2.constructor === Vehicle); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>instanceof是一个操作符，可以判断对象是否为某个类型的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(car1 <span class="keyword">instanceof</span> Vehicle); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(car2 <span class="keyword">instanceof</span> Vehicle); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>instanceof判断的是对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>isPrototypeOf用来判断proptotype对象和实例之间的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(Vehicle.prototype.isPrototypeOf(car1)); <span class="comment">//true</span></div><div class="line">  <span class="built_in">console</span>.log(Vehicle.prototype.isPrototypeOf(car2)); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>hasOwnProperty()可以判断一个对象是否包含自定义属性而不是原型链上的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(car1.hasOwnProperty(<span class="string">'engines'</span>)); <span class="comment">//true</span></div><div class="line"> <span class="built_in">console</span>.log(car1.hasOwnProperty(<span class="string">'drive'</span>)); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;p&gt;构造函数也是一个函数，通过new运算符可以生成一份实例同时把this绑定到实例上。JavaScript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;engines&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.engines = engines;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vehicle.prototype.drive = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`engines=&amp;gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.engines&amp;#125;&lt;/span&gt;`&lt;/span&gt;);    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; car1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vehicle(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; car2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vehicle(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  car1.drive(); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; engines=&amp;gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  car2.drive(); &lt;span class=&quot;comment&quot;&gt;//=&amp;gt; engines=&amp;gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(car1.constructor === Vehicle); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(car2.constructor === Vehicle); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>promise.all错误处理</title>
    <link href="http://hero-guo.com/2017/03/13/promise-all/"/>
    <id>http://hero-guo.com/2017/03/13/promise-all/</id>
    <published>2017-03-13T13:15:15.000Z</published>
    <updated>2017-08-30T15:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常处理多个请求的时候我们会用Promise.all()方法。该方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。但是当其中任何一个被拒绝的话。主Promise.all([..])就会立即被拒绝，并丢弃来自其他所有promis的全部结果。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.reject(<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">100</span>, <span class="string">"foo"</span>);</div><div class="line">&#125;); </div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">values</span> =&gt;</span> &#123; </div><div class="line">  <span class="built_in">console</span>.log(values); <span class="comment">// 永远走不到这里</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 2</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这不是我们想要的。所以在使用这个方法的时候要记住为每个promise关联一个错误的处理函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> err;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.reject(<span class="number">2</span>).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> err;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">100</span>, <span class="string">"foo"</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> err;</div><div class="line">&#125;); </div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">values</span> =&gt;</span> &#123; </div><div class="line">  <span class="built_in">console</span>.log(values); <span class="comment">// [3, 2, "foo"]</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">//不会走到这里</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常处理多个请求的时候我们会用Promise.all()方法。该方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。但是当其中任何一个被拒绝的话。主Promise.all([..])就会立即被拒绝，并丢弃来自其他所有promis的全部结果。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>函数柯里化</title>
    <link href="http://hero-guo.com/2017/02/27/curry/"/>
    <id>http://hero-guo.com/2017/02/27/curry/</id>
    <published>2017-02-27T03:27:55.000Z</published>
    <updated>2017-08-30T14:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数柯里化定义"><a href="#函数柯里化定义" class="headerlink" title="函数柯里化定义"></a>函数柯里化定义</h3><p>柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>
<h3 id="函数柯理化实现"><a href="#函数柯理化实现" class="headerlink" title="函数柯理化实现"></a>函数柯理化实现</h3><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> autocurry = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> numargs = fn.length;</div><div class="line">  <span class="keyword">return</span> createRecurser([]);</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createRecurser</span> (<span class="params">acc</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">      <span class="keyword">return</span> recurse(acc, args);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">recurse</span> (<span class="params">acc, args</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> newacc = acc.concat(args);</div><div class="line">    <span class="keyword">if</span> (newacc.length &lt; numargs) &#123;</div><div class="line">      <span class="keyword">return</span> createRecurser(newacc);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, newacc);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> add = autocurry(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>)); =&gt; <span class="number">3</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">3</span>)); =&gt; <span class="number">4</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;函数柯里化定义&quot;&gt;&lt;a href=&quot;#函数柯里化定义&quot; class=&quot;headerlink&quot; title=&quot;函数柯里化定义&quot;&gt;&lt;/a&gt;函数柯里化定义&lt;/h3&gt;&lt;p&gt;柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。&lt;/p&gt;
&lt;h3 id=&quot;函数柯理化实现&quot;&gt;&lt;a href=&quot;#函数柯理化实现&quot; class=&quot;headerlink&quot; title=&quot;函数柯理化实现&quot;&gt;&lt;/a&gt;函数柯理化实现&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="柯里化" scheme="http://hero-guo.com/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 事件详解</title>
    <link href="http://hero-guo.com/2017/02/13/javascript-event/"/>
    <id>http://hero-guo.com/2017/02/13/javascript-event/</id>
    <published>2017-02-13T03:17:33.000Z</published>
    <updated>2018-07-11T13:37:09.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件冒泡与捕获"><a href="#事件冒泡与捕获" class="headerlink" title="事件冒泡与捕获"></a>事件冒泡与捕获</h3><ol>
<li><p>冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。<br>IE 5.5: div -&gt; body -&gt; document<br>IE 6.0: div -&gt; body -&gt; html -&gt; document<br>Mozilla 1.0: div -&gt; body -&gt; html -&gt; document -&gt; window</p>
</li>
<li><p>捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)。</p>
</li>
<li>DOM事件流：同时支持两种事件模型：捕获型事件和冒泡型事件，但是，捕获型事件先发生。两种事件流会触及DOM中的所有对象，从document对象开始，也在document对象结束。<br>DOM事件模型最独特的性质是，文本节点也触发事件(在IE中不会)。<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件，那这两个事件处理程序哪个先执行呢？事件顺序是什么？</p>
<h5 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h5><p>当你使用事件捕获时，父级元素先触发，子级元素后触发，即div先触发，p后触发。</p>
<h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><p>当你使用事件冒泡时，子级元素先触发，父级元素后触发，即p先触发，div后触发。</p>
<h5 id="W3C模型"><a href="#W3C模型" class="headerlink" title="W3C模型"></a>W3C模型</h5><p>W3C模型是将两者进行中和，在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。</p>
<p>程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，type, listener[, options]。第一个参数表示监听事件类型的字符串。第二个参数当所监听的事件类型触发时，会接收到一个事件通知（实现了 Event 接口的对象）对象。listener 必须是一个实现了 EventListener 接口的对象，或者是一个函数。第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡<br>ele.addEventListener(‘click’,doSomething,true)<br>true=捕获<br>false=冒泡</p>
<h5 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h5><p>IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ele.attachEvent(<span class="string">"onclick"</span>, doSomething);</div></pre></td></tr></table></figure></p>
<p>事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。</p>
<p>至此我们可以封装一下事件绑定的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件绑定</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">target, type, func</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target.addEventListener) &#123;</div><div class="line">    target.addEventListener(type, func, <span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.attachEvent) &#123;</div><div class="line">    target.attachEvent(<span class="string">'on'</span> + type, func);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    target[<span class="string">'on'</span> + type] = func;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//事件移除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">target, type, func</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target.removeEventListener) &#123;</div><div class="line">    target.removeEventListener(type, func, <span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.detachEvent) &#123;</div><div class="line">    target.detachEvent(<span class="string">'on'</span> + type, func);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    target[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="事件的传播是可以阻止的："><a href="#事件的传播是可以阻止的：" class="headerlink" title="事件的传播是可以阻止的："></a>事件的传播是可以阻止的：</h3><p>阻止事件冒泡<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (event.stopPropagation) &#123;</div><div class="line">  event.stopPropagation();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 兼容IE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>阻止事件的默认行为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">  event.preventDefault(); </div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  event.returnValue = <span class="literal">false</span>; <span class="comment">// 兼容IE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。有点就是可以提高性能。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'ul'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>);</div><div class="line">    addEvent(oUl, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">      <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">      <span class="keyword">if</span> (targe.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(target.innerHTML);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="JS观察者模式"><a href="#JS观察者模式" class="headerlink" title="JS观察者模式"></a>JS观察者模式</h3><p>这是一种创建松散耦合代码的技术。它定义对象间 一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。由主体和观察者组成，主体负责发布事件，同时观察者通过订阅这些事件来观察该主体。主体并不知道观察者的任何事情，观察者知道主体并能注册事件的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> handlers = &#123;&#125;;</div><div class="line">    </div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">evt, func</span>) </span>&#123;</div><div class="line">        handlers[evt] = handlers[evt] || [];</div><div class="line">        handlers[evt].push(func);</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">evt, func</span>) </span>&#123;</div><div class="line">        handlers[evt] = [];</div><div class="line">        handlers[evt].push(func);</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">evt, func</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> handler = handlers[evt];</div><div class="line">        <span class="keyword">if</span> (handler) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (handler[i] === func) &#123;</div><div class="line">              handler.splice(i, <span class="number">1</span>);</div><div class="line">              <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">evt, arg</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (handlers[evt]) &#123;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; handlers[evt].length; i++) &#123;</div><div class="line">            handlers[evt][i](arg);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">on</span>: on,</div><div class="line">        <span class="attr">once</span>: once,</div><div class="line">        <span class="attr">off</span>: off,</div><div class="line">        <span class="attr">emit</span>: emit,</div><div class="line">      &#125;;</div><div class="line">    &#125;)();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件冒泡与捕获&quot;&gt;&lt;a href=&quot;#事件冒泡与捕获&quot; class=&quot;headerlink&quot; title=&quot;事件冒泡与捕获&quot;&gt;&lt;/a&gt;事件冒泡与捕获&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。&lt;br&gt;IE 5.5: div -&amp;gt; body -&amp;gt; document&lt;br&gt;IE 6.0: div -&amp;gt; body -&amp;gt; html -&amp;gt; document&lt;br&gt;Mozilla 1.0: div -&amp;gt; body -&amp;gt; html -&amp;gt; document -&amp;gt; window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;DOM事件流：同时支持两种事件模型：捕获型事件和冒泡型事件，但是，捕获型事件先发生。两种事件流会触及DOM中的所有对象，从document对象开始，也在document对象结束。&lt;br&gt;DOM事件模型最独特的性质是，文本节点也触发事件(在IE中不会)。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://hero-guo.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>类的继承</title>
    <link href="http://hero-guo.com/2017/02/12/object-prototype/"/>
    <id>http://hero-guo.com/2017/02/12/object-prototype/</id>
    <published>2017-02-12T06:57:15.000Z</published>
    <updated>2017-08-30T14:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>混合复制</p>
<pre><code>//复制source对象的属性
function mixin(source, target) {
    for (var key in source) {
        if (!(key in target)) {
            target[key] = source[key];
        }
    }
    return target;
}

var Vehicle = {
    engines: 1,
    ignition: function() {
        console.log(&quot; Turning on my forward! &quot;);
    },
    drive: function() {
        this.ignition();
        console.log(&quot; Steering and moving forward! &quot;);
    }
};

//Car复制Vehicle的属性值和函数引用
var Car = mixin(Vehicle, {
    wheels: 4,
    drive: function() {
    //显示指定Vehicle对象调用dirve方法
    //如果直接执行Vehicle.dirve()，函数调用中的this就会绑定到Vehicle上，所以使用.call(this)来确保dirve在Car对象的上下文中执行;
    Vehicle.drive.call(this);
        console.log(&quot; Rolling on all &quot; + this.wheels + &quot;wheels!&quot;);
    }
});
Car.drive();
</code></pre><a id="more"></a></li>
<li><p>寄生继承<br> 首先复制一份父类（Vehicle），然后混入子类（Car）。然后构建实例。</p>
<pre><code>//类
function Vehicle() {
    this.engines = 1;
}
Vehicle.prototype.ignition = function() {
    console.log(&quot; Turning on my forward! &quot;);
};
Vehicle.prototype.drive = function() {
    this.ignition();
    console.log(&quot; Steering and moving forward! &quot;);
};

//寄生类Car
function Car() {
    //car 是一个Vehicle
    var car = new Vehicle();

    car.wheels = 4;
    //保存Vehicle::drive()的特殊引用
    var vehDrive = car.drive;

    //重写Vehicle::drive()
    car.drive = function() {
        vehDrive.call(this);
        console.log(&quot; Rolling on all &quot; + this.wheels + &quot;wheels!&quot;);
    }
    return car;
}
// 因为没使用new创建的新对象而是使用返回的car，所以可以直接调用Car();
//var myCar = Car();
var myCar = new Car();
myCar.drive();
</code></pre></li>
</ol>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><pre><code>function Foo(name) {
    this.name = name;
}

Foo.prototype.myName = function() {
    return this.name;
}

function Bar(name, label) {
    Foo.call(this, name);
    this.label = label;
}
//Bar.prototype 关联到 Foo.prototype
//调用Object.create()创建一个新对象并把内部的[[prototype]]关联到指定的对象（Foo.prototype）
//ES6直接修改现有的Bar.prototype
  //Object.setPrototypeOf(Bar.prototype, Foo.prototype);
Bar.prototype = Object.create(Foo.prototype);
Bar.prototype.constructor = Bar;
Bar.prototype.myLabel = function() {
    return this.label;
}

var a = new Bar(&apos;a&apos;, &apos;obj a&apos;);
</code></pre><p><code>Bar.prototype = Foo.prototype</code> 并不会创建一个关联到Bar.prototype的新对象，只是直接引用Foo.prototype对象。因此执行复制语句可能会修改Foo.prototype本身。<br><code>Bar.prototype = new Foo()</code>虽然会创建一个关联到Bar.prototype的新对象，但是他使用的是new Foo()构造函数调用，如果Foo函数有一些副作用可能会影响到Bar()的后代。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;混合复制&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//复制source对象的属性
function mixin(source, target) {
    for (var key in source) {
        if (!(key in target)) {
            target[key] = source[key];
        }
    }
    return target;
}

var Vehicle = {
    engines: 1,
    ignition: function() {
        console.log(&amp;quot; Turning on my forward! &amp;quot;);
    },
    drive: function() {
        this.ignition();
        console.log(&amp;quot; Steering and moving forward! &amp;quot;);
    }
};

//Car复制Vehicle的属性值和函数引用
var Car = mixin(Vehicle, {
    wheels: 4,
    drive: function() {
    //显示指定Vehicle对象调用dirve方法
    //如果直接执行Vehicle.dirve()，函数调用中的this就会绑定到Vehicle上，所以使用.call(this)来确保dirve在Car对象的上下文中执行;
    Vehicle.drive.call(this);
        console.log(&amp;quot; Rolling on all &amp;quot; + this.wheels + &amp;quot;wheels!&amp;quot;);
    }
});
Car.drive();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://hero-guo.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>充分理解闭包</title>
    <link href="http://hero-guo.com/2017/02/12/closure/"/>
    <id>http://hero-guo.com/2017/02/12/closure/</id>
    <published>2017-02-12T06:57:15.000Z</published>
    <updated>2017-08-30T15:35:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包定义"><a href="#闭包定义" class="headerlink" title="闭包定义"></a>闭包定义</h3><ul>
<li>函数定义时的作用域链到函数执行时依然有效</li>
<li>函数体内部到变量都可以保存在函数作用域内</li>
<li>闭包可以访问它被创建时候到上下文环境</li>
</ul>
<a id="more"></a>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>由于闭包是基于词法作用域书写代码时所产生到自然结果，所以为了理解闭包，我们先来看看什么是词法作用域。</p>
<h5 id="什么是词法作用域？"><a href="#什么是词法作用域？" class="headerlink" title="什么是词法作用域？"></a>什么是词法作用域？</h5><p>大部分标准语言编译器到第一个工作阶段叫做词法化。简单的说词法作用域就是定义在词法阶段到作用域（也就是说函数声明的位置）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a, b, c);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  bar(b * <span class="number">3</span>);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">2</span>); <span class="comment">//=&gt; 2, 4, 12</span></div></pre></td></tr></table></figure>
<p>在上面到代码中有3个逐级嵌套到作用域。</p>
<ol>
<li>包含着整个全局作用域，其中只有一个标识符： foo；</li>
<li>包含foo所创建到作用域，其中有三个标识符：a、bar、b；</li>
<li>包含bar所创建到作用域，其中有一个标识符：c。</li>
</ol>
<p>在引擎执行console.log(…)声明，并查找a、b、c三个变量到引用时。首先从最内部到作用域也就是bar()函数作用域开始查找。引擎无法找到a就会继续向上查找也就是foo()函数作用域。在这里找到来a。对于b来讲也是一样的。作用域查找会在找到第一个匹配的标识符时停止。</p>
<h5 id="闭包的产生"><a href="#闭包的产生" class="headerlink" title="闭包的产生"></a>闭包的产生</h5><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前的词法作用域之外执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line">baz(); <span class="comment">// =&gt; 2   这就是闭包</span></div></pre></td></tr></table></figure></p>
<p>函数bar的词法作用域能够访问foo的内部作用域。然后我们返回bar本身。当foo执行后，其返回值（也就是bar函数）赋值给变量baz并调用baz，实际上只是通过不同的标识符引用了内部的函数bar。虽然bar是在定义的词法作用域以外被调用，但是闭包可以访问它被创建时候到上下文环境，所以还是可以访问到变量a。这是为什么呢？</p>
<p>在foo执行之后。通常foo到整个内部作用域都会被销毁，因为引擎有垃圾回收机制用来释放不在使用到内存空间。但是因为bar声明在foo的内部，它拥有涵盖foo内部作用域的闭包，是的该作用域一直存在，并被bar随时引用。</p>
<p>无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都可以观察到闭包。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;</div><div class="line">  bar(baz);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">  fn(); <span class="comment">//闭包</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="随处可见到闭包"><a href="#随处可见到闭包" class="headerlink" title="随处可见到闭包"></a>随处可见到闭包</h5><p>你已经写过到代码中一定到处都是闭包到影子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(message);</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line">wait(<span class="string">'Hello, closure'</span>);</div></pre></td></tr></table></figure></p>
<p>wait执行1000毫秒后，它到内部作用域并不会消失，timer函数依然可以访问它内部到变量message。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupBot</span>(<span class="params">name, selector</span>) </span>&#123;</div><div class="line">  $(selector).click(<span class="function"><span class="keyword">function</span> <span class="title">activator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Activating:'</span> + name);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">setupBot(<span class="string">'Closure Bot 1'</span>, <span class="string">'#bot1'</span>);</div></pre></td></tr></table></figure></p>
<p>本质上无论何时何地。如果将函数当作第一级到值类型并到处传递，你就会看到闭包了。</p>
<h5 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;, i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码期望是输出1～5，每秒一次，每次一个。但是实际上是每秒一次输出到都是6。这是为什么呢？</p>
<p>原来循环中定义的函数都共享一个全局作用域，因此实际上只有一个i。因此我们需要更多的闭包作用域，特别是循环过程中每个迭代都需要一个闭包作用域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(j)</div><div class="line">    &#125;, j*<span class="number">1000</span>)</div><div class="line">  &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用let可以有更简单都写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;, i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是因为let每次迭代都会重新声明一个作用域。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>《你不知道的javascript上》</p>
<p>《javascript权威指南》</p>
<p>《javascript高级程序设计》</p>
<p>《javascript语言精粹》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;闭包定义&quot;&gt;&lt;a href=&quot;#闭包定义&quot; class=&quot;headerlink&quot; title=&quot;闭包定义&quot;&gt;&lt;/a&gt;闭包定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数定义时的作用域链到函数执行时依然有效&lt;/li&gt;
&lt;li&gt;函数体内部到变量都可以保存在函数作用域内&lt;/li&gt;
&lt;li&gt;闭包可以访问它被创建时候到上下文环境&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://hero-guo.com/categories/Notes/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="闭包" scheme="http://hero-guo.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>ES6-MIXIN</title>
    <link href="http://hero-guo.com/2016/12/11/ES6-mixin/"/>
    <id>http://hero-guo.com/2016/12/11/ES6-mixin/</id>
    <published>2016-12-11T06:57:15.000Z</published>
    <updated>2018-07-11T15:34:09.631Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//通过class实现混入</span></div><div class="line"><span class="comment">//extends 可以继承动态构造的类</span></div><div class="line"><span class="keyword">const</span> Mixin = <span class="function"><span class="params">Sup</span> =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Sup</span> </span>&#123;</div><div class="line">    <span class="comment">//构造方法</span></div><div class="line">    <span class="comment">//this关键字则代表实例对象</span></div><div class="line">    <span class="keyword">constructor</span>(...args) &#123;</div><div class="line">        <span class="comment">//（1）作为函数调用时（即super(...args)），super代表父类的构造函数。</span></div><div class="line">        <span class="comment">//（2）作为对象调用时（即super.prop或super.method()），super代表父类。注意，此时super即可以引用父类实例的属性和方法，也可以引用父类的静态方法。</span></div><div class="line">        <span class="keyword">super</span>(...args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(width, height, $elem) &#123;</div><div class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;</div><div class="line">            width,</div><div class="line">            height,</div><div class="line">            <span class="attr">$elem</span>: <span class="literal">null</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render($where) &#123;</div><div class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.$elem) &#123;</div><div class="line">             <span class="keyword">this</span>.$elem.css(&#123;</div><div class="line">             <span class="attr">width</span>: <span class="keyword">this</span>.width + <span class="string">'px'</span>,</div><div class="line">             <span class="attr">height</span>: <span class="keyword">this</span>.height + <span class="string">'px'</span></div><div class="line">            &#125;).appendTo($where);</div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Mixin</span>(<span class="title">Widget</span>) </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(width, height, label)&#123;</div><div class="line">    <span class="keyword">super</span>(width, height);</div><div class="line">    <span class="keyword">this</span>.label = label;</div><div class="line">    <span class="keyword">this</span>.$elem = $(<span class="string">'&lt;button&gt;'</span>).text(<span class="keyword">this</span>.label);</div><div class="line">  &#125;</div><div class="line">  render($where) &#123;</div><div class="line">    <span class="keyword">super</span>.render($where);</div><div class="line">    <span class="keyword">this</span>.$elem.click(<span class="keyword">this</span>.onClick);</div><div class="line">  &#125;</div><div class="line">  onClick() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Button'</span> + <span class="keyword">this</span>.label + <span class="string">'clicked!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> $body = $(<span class="built_in">document</span>.body) || <span class="built_in">document</span>.body;</div><div class="line"><span class="keyword">let</span> btn = <span class="keyword">new</span> Button(<span class="number">125</span>, <span class="number">30</span>, <span class="string">'hello world'</span>);</div><div class="line">btn.render($body);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hero-guo.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hero-guo.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://hero-guo.com/tags/ES6/"/>
    
  </entry>
  
</feed>
